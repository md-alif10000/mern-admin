{"ast":null,"code":"import _regeneratorRuntime from \"/home/mdalif/Desktop/coding/MERN/mern-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/home/mdalif/Desktop/coding/MERN/mern-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/home/mdalif/Desktop/coding/MERN/mern-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Redirect } from \"react-router-dom\";\nimport axios from \"../helpers/axios\";\nimport { authConstants } from \"./constants\";\nimport Swal from \"sweetalert2\";\nexport var login = function login(user) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var res, _res$data, token, _user;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch({\n                type: authConstants.LOGIN_REQUEST\n              });\n              _context.next = 3;\n              return axios.post(\"/admin/login\", _objectSpread({}, user));\n\n            case 3:\n              res = _context.sent;\n\n              if (res.status === 200) {\n                _res$data = res.data, token = _res$data.token, _user = _res$data.user;\n                localStorage.setItem(\"token\", token);\n                localStorage.setItem(\"user\", JSON.stringify(_user));\n                dispatch({\n                  type: authConstants.LOGIN_SUCCESS,\n                  payload: {\n                    token: token,\n                    user: _user\n                  }\n                });\n                Swal.fire(\"Wow..\", \"Successfully Logged in...!\", \"success\");\n              } else {\n                if (res.status === 400) {\n                  dispatch({\n                    type: authConstants.LOGIN_FAILURE,\n                    payload: {\n                      error: res.data.error\n                    }\n                  });\n                  Swal.fire(\"Opps..\", \"Something went wrong...!\", \"error\");\n                }\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var isUserLoggedIn = function isUserLoggedIn() {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var token, user;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              token = localStorage.getItem(\"token\");\n\n              if (token) {\n                user = JSON.parse(localStorage.getItem(\"user\"));\n                dispatch({\n                  type: authConstants.LOGIN_SUCCESS,\n                  payload: {\n                    token: token,\n                    user: user\n                  }\n                });\n              } else {\n                dispatch({\n                  type: authConstants.LOGIN_FAILURE,\n                  payload: {\n                    error: \"Failed to Login\"\n                  }\n                });\n              }\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var logout = function logout() {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              dispatch({\n                type: authConstants.LOGOUT_REQUEST\n              });\n              localStorage.clear();\n              _context3.next = 4;\n              return axios.post('/admin/logout');\n\n            case 4:\n              res = _context3.sent;\n\n              if (res.status === 200) {\n                localStorage.clear();\n                dispatch({\n                  type: authConstants.LOGOUT_SUCCESS\n                });\n                Swal.fire(\"Great..\", \"Successfully Logged Out..!\", \"success\");\n              } else {\n                dispatch({\n                  type: authConstants.LOGOUT_FAILURE,\n                  payload: {\n                    error: res.data.error\n                  }\n                });\n              }\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["/home/mdalif/Desktop/coding/MERN/mern-admin/src/actions/auth.action.js"],"names":["Redirect","axios","authConstants","Swal","login","user","dispatch","type","LOGIN_REQUEST","post","res","status","data","token","localStorage","setItem","JSON","stringify","LOGIN_SUCCESS","payload","fire","LOGIN_FAILURE","error","isUserLoggedIn","getItem","parse","logout","LOGOUT_REQUEST","clear","LOGOUT_SUCCESS","LOGOUT_FAILURE"],"mappings":"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","sourcesContent":["import { Redirect } from \"react-router-dom\";\r\nimport axios from \"../helpers/axios\";\r\nimport { authConstants } from \"./constants\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nexport const login = (user) => {\r\n  return async (dispatch) => {\r\n    dispatch({type:authConstants.LOGIN_REQUEST})\r\n    const res = await axios.post(\"/admin/login\", {\r\n      ...user,\r\n    });\r\n\r\n    if (res.status === 200) {\r\n      const { token, user } = res.data;\r\n      localStorage.setItem(\"token\", token);\r\n      localStorage.setItem(\"user\", JSON.stringify(user));\r\n      dispatch({\r\n        type: authConstants.LOGIN_SUCCESS,\r\n        payload: {\r\n          token,\r\n          user,\r\n        },\r\n      });\r\n      \t\tSwal.fire(\"Wow..\", \"Successfully Logged in...!\", \"success\");\r\n    } else {\r\n      if (res.status === 400) {\r\n        dispatch({\r\n          type: authConstants.LOGIN_FAILURE,\r\n          payload: { error: res.data.error },\r\n        });\r\n        \t\tSwal.fire(\"Opps..\", \"Something went wrong...!\", \"error\");\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\n\r\nexport const isUserLoggedIn = () => {\r\n  return async (dispatch) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      const user = JSON.parse(localStorage.getItem(\"user\"));\r\n      dispatch({\r\n        type: authConstants.LOGIN_SUCCESS,\r\n        payload: {\r\n          token,\r\n          user,\r\n        },\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: authConstants.LOGIN_FAILURE,\r\n        payload: { error: \"Failed to Login\" },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\n\r\n\r\n\r\nexport const logout = () => {\r\n  return async (dispatch) => {\r\n    dispatch({\r\n      type:authConstants.LOGOUT_REQUEST\r\n    })\r\n    localStorage.clear()\r\n    const res=await axios.post('/admin/logout')\r\n    if(res.status===200){\r\n      localStorage.clear();\r\n      dispatch({\r\n        type:authConstants.LOGOUT_SUCCESS\r\n      })\r\n\t\tSwal.fire(\"Great..\", \"Successfully Logged Out..!\", \"success\");\r\n      \r\n    }else{\r\n      dispatch({type:authConstants.LOGOUT_FAILURE,\r\n      payload:{error:res.data.error}})\r\n\r\n    }\r\n\r\n\r\n\r\n \r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}