{"ast":null,"code":"import _regeneratorRuntime from \"/home/mdalif/Desktop/coding/MERN/mern-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/home/mdalif/Desktop/coding/MERN/mern-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/home/mdalif/Desktop/coding/MERN/mern-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"../helpers/axios\";\nimport { userConstants } from \"./constants\";\nexport var register = function register(user) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var res, message;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch({\n                type: userConstants.REGISTER_REQUEST\n              });\n              _context.next = 3;\n              return axios.post(\"/admin/register\", _objectSpread({}, user));\n\n            case 3:\n              res = _context.sent;\n\n              if (res.status === 201) {\n                message = res.data.message;\n                dispatch({\n                  type: userConstants.REGISTER_SUCCESS,\n                  payload: {\n                    message: message\n                  }\n                });\n              } else {\n                if (res.status === 400) {\n                  dispatch({\n                    type: userConstants.REGISTER_FAILURE,\n                    payload: {\n                      error: res.data.error\n                    }\n                  });\n                }\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}; // export const getAllUsers=()=>{\n//    return async (dispatch) => {\n//      dispatch({ type: userConstants.REGISTER_REQUEST });\n//      const res = await axios.post(\"/admin/getAllUsers\", {\n//        ...user,\n//      });\n//      if (res.status === 201) {\n//        const { message } = res.data;\n//        dispatch({\n//          type: userConstants.REGISTER_SUCCESS,\n//          payload: { message },\n//        });\n//      } else {\n//        if (res.status === 400) {\n//          dispatch({\n//            type: userConstants.REGISTER_FAILURE,\n//            payload: { error: res.data.error },\n//          });\n//        }\n//      }\n//    };\n// }","map":{"version":3,"sources":["/home/mdalif/Desktop/coding/MERN/mern-admin/src/actions/user.action.js"],"names":["axios","userConstants","register","user","dispatch","type","REGISTER_REQUEST","post","res","status","message","data","REGISTER_SUCCESS","payload","REGISTER_FAILURE","error"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,SAASC,aAAT,QAAgC,aAAhC;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAAU;AAC9B;AAAA,wEAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACLA,cAAAA,QAAQ,CAAC;AAACC,gBAAAA,IAAI,EAACJ,aAAa,CAACK;AAApB,eAAD,CAAR;AADK;AAAA,qBAEWN,KAAK,CAACO,IAAN,CAAW,iBAAX,oBACbJ,IADa,EAFX;;AAAA;AAEDK,cAAAA,GAFC;;AAML,kBAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AAEhBC,gBAAAA,OAFgB,GAEJF,GAAG,CAACG,IAFA,CAEhBD,OAFgB;AAIxBN,gBAAAA,QAAQ,CAAC;AACPC,kBAAAA,IAAI,EAAEJ,aAAa,CAACW,gBADb;AAEPC,kBAAAA,OAAO,EAAE;AAACH,oBAAAA,OAAO,EAAPA;AAAD;AAFF,iBAAD,CAAR;AAID,eARC,MAQK;AACL,oBAAIF,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtBL,kBAAAA,QAAQ,CAAC;AACPC,oBAAAA,IAAI,EAAEJ,aAAa,CAACa,gBADb;AAEPD,oBAAAA,OAAO,EAAE;AAAEE,sBAAAA,KAAK,EAAEP,GAAG,CAACG,IAAJ,CAASI;AAAlB;AAFF,mBAAD,CAAR;AAID;AACF;;AArBM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAuBH,CAxBM,C,CA2BP;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import axios from \"../helpers/axios\";\r\nimport { userConstants,  } from \"./constants\";\r\n\r\nexport const register = (user) => {\r\n    return async (dispatch) => {\r\n      dispatch({type:userConstants.REGISTER_REQUEST})\r\n    const res = await axios.post(\"/admin/register\", {\r\n      ...user,\r\n    });\r\n\r\n      if (res.status === 201) {\r\n      \r\n      const { message } = res.data;\r\n\r\n      dispatch({\r\n        type: userConstants.REGISTER_SUCCESS,\r\n        payload: {message},\r\n      });\r\n    } else {\r\n      if (res.status === 400) {\r\n        dispatch({\r\n          type: userConstants.REGISTER_FAILURE,\r\n          payload: { error: res.data.error },\r\n        });\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\n\r\n// export const getAllUsers=()=>{\r\n\r\n//    return async (dispatch) => {\r\n//      dispatch({ type: userConstants.REGISTER_REQUEST });\r\n//      const res = await axios.post(\"/admin/getAllUsers\", {\r\n//        ...user,\r\n//      });\r\n\r\n//      if (res.status === 201) {\r\n//        const { message } = res.data;\r\n\r\n//        dispatch({\r\n//          type: userConstants.REGISTER_SUCCESS,\r\n//          payload: { message },\r\n//        });\r\n//      } else {\r\n//        if (res.status === 400) {\r\n//          dispatch({\r\n//            type: userConstants.REGISTER_FAILURE,\r\n//            payload: { error: res.data.error },\r\n//          });\r\n//        }\r\n//      }\r\n//    };\r\n\r\n// }"]},"metadata":{},"sourceType":"module"}