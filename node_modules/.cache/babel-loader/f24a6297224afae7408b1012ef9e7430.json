{"ast":null,"code":"import _regeneratorRuntime from \"/home/mdalif/Desktop/coding/MERN/mern-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/mdalif/Desktop/coding/MERN/mern-admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"../helpers/axios\";\nimport { rechargeConstants } from \"./constants\";\nimport Swal from \"sweetalert2\"; // new action\n\nexport var getAllRecharges = function getAllRecharges() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var res, recharges;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              dispatch({\n                type: rechargeConstants.GET_ALL_RECHARGE_REQUEST\n              });\n              _context.next = 4;\n              return axios.get(\"/recharge/allRecharge\");\n\n            case 4:\n              res = _context.sent;\n\n              if (res.status === 200) {\n                recharges = res.data.recharges;\n                dispatch({\n                  type: rechargeConstants.GET_ALL_RECHARGE_SUCCESS,\n                  payload: {\n                    recharges: recharges\n                  }\n                });\n              } else {\n                dispatch({\n                  type: rechargeConstants.GET_ALL_RECHARGE_FAILURE\n                });\n              }\n\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var updateRecharge = function updateRecharge(data) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dispatch({\n                type: rechargeConstants.UPDATE_RECHARGE_REQUEST\n              });\n              _context2.next = 3;\n              return axios.put(\"/recharge/update\", data);\n\n            case 3:\n              res = _context2.sent;\n\n              if (res.status === 201) {\n                dispatch({\n                  type: rechargeConstants.UPDATE_RECHARGE_SUCCESS\n                });\n                dispatch(getAllRecharges());\n                Swal.fire(\"Great.\", \"Updated Successfully....!\", \"success\");\n              } else {\n                dispatch({\n                  type: rechargeConstants.UPDATE_RECHARGE_FAILURE\n                });\n                Swal.fire(\"Oops...\", \"Something went wrong.!\", \"error\");\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["/home/mdalif/Desktop/coding/MERN/mern-admin/src/actions/recharge.action.js"],"names":["axios","rechargeConstants","Swal","getAllRecharges","dispatch","type","GET_ALL_RECHARGE_REQUEST","get","res","status","recharges","data","GET_ALL_RECHARGE_SUCCESS","payload","GET_ALL_RECHARGE_FAILURE","console","log","updateRecharge","UPDATE_RECHARGE_REQUEST","put","UPDATE_RECHARGE_SUCCESS","fire","UPDATE_RECHARGE_FAILURE"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,SAASC,iBAAT,QAAkC,aAAlC;AACA,OAAOC,IAAP,MAAiB,aAAjB,C,CAGA;;AACA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACnC;AAAA,wEAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEHA,cAAAA,QAAQ,CAAC;AAAEC,gBAAAA,IAAI,EAAEJ,iBAAiB,CAACK;AAA1B,eAAD,CAAR;AAFG;AAAA,qBAGeN,KAAK,CAACO,GAAN,yBAHf;;AAAA;AAGGC,cAAAA,GAHH;;AAIH,kBAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACdC,gBAAAA,SADc,GACAF,GAAG,CAACG,IADJ,CACdD,SADc;AAEtBN,gBAAAA,QAAQ,CAAC;AACPC,kBAAAA,IAAI,EAAEJ,iBAAiB,CAACW,wBADjB;AAEPC,kBAAAA,OAAO,EAAE;AAAEH,oBAAAA,SAAS,EAATA;AAAF;AAFF,iBAAD,CAAR;AAID,eAND,MAMO;AACLN,gBAAAA,QAAQ,CAAC;AAAEC,kBAAAA,IAAI,EAAEJ,iBAAiB,CAACa;AAA1B,iBAAD,CAAR;AACD;;AAZE;AAAA;;AAAA;AAAA;AAAA;AAcHC,cAAAA,OAAO,CAACC,GAAR;;AAdG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAiBD,CAlBM;AAoBP,OAAO,IAAMC,cAAc,GAAC,SAAfA,cAAe,CAACN,IAAD,EAAQ;AAClC;AAAA,yEAAO,kBAAOP,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACLA,cAAAA,QAAQ,CAAC;AAACC,gBAAAA,IAAI,EAACJ,iBAAiB,CAACiB;AAAxB,eAAD,CAAR;AADK;AAAA,qBAEgBlB,KAAK,CAACmB,GAAN,qBAA6BR,IAA7B,CAFhB;;AAAA;AAEIH,cAAAA,GAFJ;;AAGE,kBAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtBL,gBAAAA,QAAQ,CAAC;AACPC,kBAAAA,IAAI,EAAEJ,iBAAiB,CAACmB;AADjB,iBAAD,CAAR;AAIGhB,gBAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACMD,gBAAAA,IAAI,CAACmB,IAAL,CAAU,QAAV,EAAoB,2BAApB,EAAiD,SAAjD;AACV,eAPD,MAOO;AACLjB,gBAAAA,QAAQ,CAAC;AAAEC,kBAAAA,IAAI,EAAEJ,iBAAiB,CAACqB;AAA1B,iBAAD,CAAR;AACMpB,gBAAAA,IAAI,CAACmB,IAAL,CAAU,SAAV,EAAqB,wBAArB,EAA+C,OAA/C;AACP;;AAbH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAeD,CAhBM","sourcesContent":["import axios from \"../helpers/axios\";\nimport { rechargeConstants } from \"./constants\";\nimport Swal from \"sweetalert2\";\n\n\n// new action\nexport const getAllRecharges = () => {\n  return async (dispatch) => {\n    try {\n      dispatch({ type: rechargeConstants.GET_ALL_RECHARGE_REQUEST });\n      const res = await axios.get(`/recharge/allRecharge`);\n      if (res.status === 200) {\n        const { recharges } = res.data;\n        dispatch({\n          type: rechargeConstants.GET_ALL_RECHARGE_SUCCESS,\n          payload: { recharges },\n        });\n      } else {\n        dispatch({ type: rechargeConstants.GET_ALL_RECHARGE_FAILURE });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nexport const updateRecharge=(data)=>{\n  return async (dispatch)=>{\n    dispatch({type:rechargeConstants.UPDATE_RECHARGE_REQUEST})\n       const res = await axios.put(`/recharge/update`,data);\n           if (res.status === 201) {\n             dispatch({\n               type: rechargeConstants.UPDATE_RECHARGE_SUCCESS,\n             });\n\n                dispatch(getAllRecharges());\n                      Swal.fire(\"Great.\", \"Updated Successfully....!\", \"success\");\n           } else {\n             dispatch({ type: rechargeConstants.UPDATE_RECHARGE_FAILURE });\n                   Swal.fire(\"Oops...\", \"Something went wrong.!\", \"error\");\n           }\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}